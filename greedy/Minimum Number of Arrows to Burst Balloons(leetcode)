/*Activity Selection Problem

The problem is to select the maximum number of activities that can be performed by a single person or machine, assuming that a person can only work on a single activity at a time

Analogy
So just like activity selection problem here we have to select maximum no of balloons got burst by a single arrow , assuming that a arrow can burst all overlapping balloons.

activities -> balloons
person -> arrow
time -> x-coordinate (dimension for overlapping criteria)
*/

class Solution {
public:
    
    static bool cmp(vector<int>v1,vector<int>v2){
        
        if(v1[1]<v2[1])return true;
        
        if(v1[1]==v2[1] and v1[0]<v2[0])return true;
        
        return false;
    }
    
    int findMinArrowShots(vector<vector<int>>& a) {
        
        int i,j,ans=0,n=a.size();
        
        sort(a.begin(), a.end(), cmp);
        
        i=0;
        
        while(i<n){
            
            j=i+1;
            
            while(j<n and a[j][0]<=a[i][1]){
                j++;
            }
            
            ans++;
            i=j;
        }
        
        
        return ans;
    }
};
