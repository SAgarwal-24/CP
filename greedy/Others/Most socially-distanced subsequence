/*
B. Most socially-distanced subsequence
https://codeforces.com/problemset/problem/1364/B
-------------
Trick: Only pattern to realize is peak and valley which satisfies greedy proof for all needs.
       Just consider all elements either situated at peak or valley to maximize sum

*/

#include <bits/stdc++.h>
using namespace std;
#define endl "\n" 
#define int long long
#define all(c) c.begin(), c.end()
#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);

void print(int a[],int n){
    for(int i=0;i<n;i++){
        cout<<a[i]<<" ";
    }
    cout<<endl;
}

int32_t main(){
    fast
    int tc=1;
    cin>>tc;

    while(tc--){
    int n,i,j;
    cin>>n;

    int a[n];
    vector<int>v;
    for(i=0;i<n;i++){
        int x; cin>>x;
        a[i]=x;
    }

    v.push_back(a[0]);

    for(i=1;i<n-1;i++){
        if((a[i-1]<a[i] and a[i]>a[i+1]) || (a[i-1]>a[i] and a[i]<a[i+1])){
            v.push_back(a[i]);
        }
    }
    v.push_back(a[n-1]);

    cout<<v.size()<<endl;
    for(auto x:v)cout<<x<<" ";

    cout<<endl;
    

    }
return 0;
}
