/*
https://leetcode.com/problems/candy/
candy
------
greedy - traversing from both sides in necessary bcz we need to make sure finally child with rating get more candies which can't be fullfilled in single traverse

 input
[4,3,2,1]

 stdout
candi: 1 2 2 1 
candi: 4 3 2 1 

*/

class Solution {
public:
    
    int candy(vector<int>& a) {
        
        int ans=0,i=0,n=a.size(),c=0;
        
        if(n==1)return 1;
        
        int candi[20005]={0};
        
        for(i=0;i<n;i++){
            candi[i]=1;
        }
        
        for(i=1;i<n-1;i++){
            c=0;
            
            if(a[i-1]<a[i]){
                c=candi[i-1];
            }
            
            if(a[i]>a[i+1]){
                c=max(c,candi[i+1]);
            }
            
            candi[i]=c+1;
        }
        
        /*
         for(i=0;i<n;i++){
            cout<<candi[i]<<" ";
        }
        cout<<endl;
        */
        
        for(i=n-2;i>=1;i--){
            c=0;
            
            if(a[i-1]<a[i] and candi[i-1]>=candi[i]){
                candi[i]=candi[i-1]+1;
            }
            
            if(a[i]>a[i+1] and candi[i]<=candi[i+1]){
                candi[i]=candi[i+1]+1;
            }
            
            
        }
        
        if(a[0]>a[1]){
            candi[0]=candi[1]+1;
        }
        
         if(a[n-1]>a[n-2]){
            candi[n-1]=candi[n-2]+1;
        }
        
        
        for(i=0;i<n;i++){
           // cout<<candi[i]<<" ";
            ans+=candi[i];
        }
        //cout<<endl;
        

        
        return ans;
        
    }
};
/*
[1,0,2]
[1,2,2]
[1,2,4,1,2,4]
[4,1,2,4,5]
[6,5,4,3,2,1]
[1,3,4,5,2]
[3,2,1,4,2]

*/
