/*
link: https://codeforces.com/contest/1845/problem/B

*/

#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,fma")
#pragma GCC optimize("unroll-loops")
#define watch(x) cout << (#x) << " is " << (x) << endl
#include <bits/stdc++.h> 
#include <complex>
#include <queue>
#include <set>
#include <unordered_set>
#include <list>
#include <chrono>
#include <random>
#include <iostream>
#include <algorithm>
#include <cmath>
#include <string>
#include <vector>
#include <map>
#include <unordered_map>
#include <stack>
#include <iomanip>
#include <fstream>
 
using namespace std;
 
 
typedef long long ll;
typedef long double ld;
typedef pair<int,int> p32;
typedef pair<ll,ll> p64;
typedef pair<double,double> pdd;
typedef vector<ll> v64;
typedef vector<int> vi;
typedef vector<vector<int> > vv32;
typedef vector<vector<ll> > vv64;
typedef vector<vector<p64> > vvp64;
typedef vector<p64> vp64;
typedef vector<p32> vp32;
ll MOD = 998244353;
double eps = 1e-12;
#define forn(i,e) for(ll i = 0; i < e; i++)
#define forsn(i,s,e) for(ll i = s; i < e; i++)
#define rforn(i,s) for(ll i = s; i >= 0; i--)
#define rforsn(i,s,e) for(ll i = s; i >= e; i--)
#define ln "\n"
#define dbg(x) cout<<#x<<" = "<<x<<ln
#define mp make_pair
#define pb push_back
#define fi first
#define se second
#define INF 2e18
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define all(x) (x).begin(), (x).end()
#define sz(x) ((ll)(x).size())
 

struct point {
    ll x; 
    ll y;
};

ll dist(point a, point b){

    ll disX = abs(a.x - b.x);
    ll disY = abs(a.y - b.y);

    return disX + disY;
}

void solve(){

    ll x, y;

    point a, b, c;
    cin>>a.x>>a.y;
    cin>>b.x>>b.y;
    cin>>c.x>>c.y;

    /*
        CASE-1 : when both 'B' & 'C' in one quadrant w.r.t 'A'
        CASE-2 : when both 'B' & 'C' in two quadrant w.r.t 'A' (but on same side w.r.t to x or y axis) - as in eg:1
        CASE-3 : when both 'B' & 'C' are opposite completely w.r.t A (eg : B in 1st quadrant, C in 3rd quadrant and A is origin)
    
    Note - logic to realize is that if 'B' and 'C' lie on same side w.r.t 'A' 
           w.r.t to x-axis or y-axis or both of the x,y axes then only we can include that
           distance in common path
    */

    // if something common w.r.t x-axis
    ll dx = ( max(c.x, b.x) < a.x || min(c.x, b.x) > a.x ) 
            ? min(abs(a.x - c.x), abs(a.x - b.x)) : 0;


    // if something common w.r.t y-axis
    ll dy = ( max(c.y, b.y) < a.y || min(c.y, b.y) > a.y ) 
            ? min(abs(a.y - c.y), abs(a.y - b.y)) : 0;


    cout<<(dx + dy + 1)<<endl;

}
int main()
{
 fast_cin();
 ll t;
 cin >> t;
 for(int it=1;it<=t;it++) {
     solve();
 }
 return 0;
}
