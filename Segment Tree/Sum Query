
//link: https://www.codechef.com/problems/SCQ3

#include <bits/stdc++.h>
using namespace std;
#define endl "\n"
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define vi vector<int> 
#define watch(x) cout << (#x) << " is " << (x) << endl

#define INF 1e18
#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);

template <typename C,
          typename T = std::decay_t<decltype(*begin(std::declval<C>()))>,
          typename std::enable_if<!std::is_same<C, std::string>::value>::type * = nullptr>
std::ostream &operator<<(std::ostream &os, const C &container)
{
    bool first = true;
    std::stringstream ss;
    ss << '[';
    for (const auto &x : container)
    {
        if (!first)
        {
            ss << ", ";
        }
        first = false;
        ss << x;
    }
    ss << ']';
    return os << ss.str();
}
template <class T1, class T2>
std::ostream &operator<<(std::ostream &os, const std::pair<T1, T2> &p)
{
    os << '{' << p.first << ", " << p.second << '}';
    return os;
}

/*
   0 1 2  3 4 5 5 6 7 8 9
   1 2 3  5 6 9 8 2 10 47
   ------

    (0-9) -> (0,4), (5-9)
    (0-4)
    ==========

          0 1 2 3 4
  a ->    1 2 3 4 5

     0-4  -> 0-2 , 3-4
     0-2  -> 0-1 , 2-2
     0-1  -> 0-0 , 1-1 

*/
void build_tree(vi &tree,vi &a, int as, int ae, int index){

    if(as==ae){
        tree[index] = a[as];
        return;
    }


    int mid = as + (ae-as)/2;
    build_tree(tree, a, as, mid, 2*index);
    build_tree(tree, a,mid+1,ae,2*index+1);

    tree[index] = tree[2*index] + tree[2*index+1];
}

int query(vi &tree, int as, int ae, int qs, int qe, int index){

    //full overlap

    if(qs<=as and ae<=qe)
      return tree[index];

    //no overlap
    if(qe<as || ae<qs)
      return 0;

    //partial overlap
    int mid = as + (ae-as)/2;

    int left = query(tree, as, mid, qs, qe, 2*index);
    int ri =   query(tree,mid+1,ae,qs,qe,2*index+1);

    return left + ri;
}

void solve(){
	
    int i,n;
    cin>>n;

    vector<int>a(n+1,0);
    for(i=0;i<n;i++)
    cin>>a[i];

    // int h = (int) (ceil(log2(n)));
    // int mx_si = 2*(int)pow(2,h) - 1;

    vector<int>tree(4*n,0);

    build_tree(tree,a,0,n-1,1);

    // watch(tree);

    int q;
    cin>>q;

    for(i=0;i<q;i++){
        int l,r;
        cin>>l>>r;
        l--, r--;  //0-based indexing for array but 1-based for tree

        int ans = query(tree,0,n-1,l,r,1);
        cout<<ans<<endl;
    }
}


int32_t main()
{
    fast int tc = 1;
    cin >> tc;

 
    while (tc--)
    {
        solve();
    }


    return 0;
}

/* --------fenwick tree solution --------

#include <bits/stdc++.h>
using namespace std;

#define ll long long
#define fp(i,x,n) for(int i=x;i<n;i++)

const int maxn = 1e5 + 5;

ll a[maxn], fenwick[maxn] = {0};

void update(int index, ll val, int n){
    
    while(index <= n){
        
        fenwick[index] += val;
        
        index += index & (-index);
    }
}

void init(int n){
    
    fp(i,1,n+1){
        
        update(i,a[i],n);
    }
}

ll query(int x){
    
    ll sum = 0;
    
    while(x){
        
        sum += fenwick[x];
        
        x -= x & (-x);
    }
    
    return sum;
}

int main(){
    
    int n,t,q,x,y;
    
    cin >> t;
    
    while(t--){
    
        cin >> n;
    
        fp(i,1,n+1)
            cin >> a[i];
        
        init(n);
        
        cin >> q;
        
        while(q--){
            
            cin >> x >> y;
            
            cout << query(y) - query(x-1) << "\n";
        }
        
        fp(i,1,n+1)
            fenwick[i] = 0;
    }
    
    return 0;
}
*/
