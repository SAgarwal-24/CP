/*
C - Duodecim Ferra (Atcoder)
https://atcoder.jp/contests/abc185/tasks/abc185_c

intuition
 - to find no ways to divide 'L' length rod in 'P' parts -> we find no of ways to divide 'L-i' length rod in 'P-1' parts (where 1<=i<=len)
 - in implementation use for loop to traverse 'i'
 - alter way to code without for loop and using a different recursion is here(by making partition at ith position) : https://atcoder.jp/contests/abc185/submissions/23705344

Helpful resources
 - https://math.stackexchange.com/questions/3103813/making-12-by-adding-1-3-and-5
 
*/

#include <bits/stdc++.h>
using namespace std;
#define endl "\n" 
#define int long long

#define mod 1000000007
#define watch(x) cout << (#x) << " is " << (x) << endl
#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int dp[205][13];

int g=0;

void print(vector<int>v){
    for(auto x:v)cout<<x<<" ";

    cout<<endl;
}

int divide(int len,int parts,vector<int>path){


    if(parts==0){
        if(len==0){
           // print(path);
            return 1;
        }
        return 0;
    }

    if(len<parts)return 0;

    if(dp[len][parts]!=-1)return dp[len][parts];

    int ans=0;

    for(int i=1;i<=len;i++){

        if(len-i>=parts-1)
        {
           // cout<<len<<" -> "<<len-i<<endl;
            path.push_back(i);
            ans+=divide(len-i,parts-1,path);
        }
    }
   // cout<<"\n----\n";

    dp[len][parts]=ans;

    return ans;

}

int32_t main(){
fast

   int n,ans=0,i,j;
   cin>>n;

   memset(dp,-1,sizeof(dp));

   vector<int>path;
   ans=divide(n,12,path);

   cout<<ans;

return 0;
}
