/*
-https://codeforces.com/contest/474/problem/D
-----------------------------
 - Find No of ways to achive a config (standard dp based)
 
  dp[len] = dp[len-1] + dp[len-k]
  
  dp[len] = no of ways/no of strings of length 'n' with white flowers in size of 'k' if they are present 
  
  len=> length of string (eg len=4 "RRWW")
  if char at position(i) = len is 'W' then for next k-1 we have to place 'W' so we need to know dp(len-k) otherwise if its 'R' then there is no boundation so we 
  need to know dp[len-1] 

*/

#include <bits/stdc++.h>
using namespace std;
#define endl "\n" 
#define int long long
#define pi (3.141592653589)
#define mod 1000000007

#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);



int k;
int dp[100005];

int eats(int len)
{
   
    if(len==0){
        return 1;
    }

    if(len<0)return 0;

    if(dp[len]!=-1)return dp[len];

    int w1=0, w2=0;

    w1 = eats(len-1);

    w2 = eats(len-k);
    

    return dp[len] = (w1 + w2)%mod;

}



int32_t main(){
    
   
    fast
    int tc=1,i;
    cin>>tc>>k;

    memset(dp, -1, sizeof(dp));

    for(i=100000;i>=1;i--){
       dp[i] = eats(i);
       
    }

    for(i=1;i<=100000;i++){
        dp[i] = (dp[i] + dp[i-1])%mod; 
    }


    while(tc--){
    int a,b;
    cin>>a>>b;
    
    cout<< (dp[b] - dp[a-1] + mod)%mod <<endl;

    }

return 0;
}
