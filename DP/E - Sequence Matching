/*
- Awesome question best for revision
- E - Sequence Matching
- https://atcoder.jp/contests/abc185/tasks/abc185_e

- Application of lcs 
- as we have to find a "final subsequence" from array and 'a' and 'b' such that x+y is minimum
- where x = no of elements not considered in the the "final subsequence"
        y =  no of non matching elements in the the "final subsequence"

*/

#include <bits/stdc++.h>
using namespace std;
#define endl "\n" 
#define int long long

#define watch(x) cout << (#x) << " is " << (x) << endl

#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int n,m;
int a[1004], b[1004];

int dp[1004][1004];

int lcs(int i,int j){

    if(i>=n || j>=m){
        //base case is when either all elements of 'a' used up or of 'b' or of both
        // so in each case remaing elements are automatically deleted
        // so x=x+no_of_remaing_elements= (n+m)-(i+j)
        return (n+m)-(i+j); 
    }

    if(dp[i][j]!=-1)return dp[i][j];

    int ans=0;
    if(a[i]==b[j]){
        ans = lcs(i+1,j+1);
    }
    else{ // since a[i]!=b[j] there are 3 ways we can reccur;

        int w1=lcs(i+1,j); // delete ith element ie x=x+1
        int w2=lcs(i,j+1); // delete jth element ie x=x+1

        // include a[i] and b[j] in final sequence even if they are unequal 
        // this make y=y+1
        int w3=lcs(i+1,j+1); 

        // here this added one is for either x=x+1 or y=y+1
        ans = 1+ min(w3,min(w1,w2));
    }

    dp[i][j] = ans;

    return ans;
}

int32_t main(){
fast
int tc=1;
//cin>>tc;
while(tc--){
   int i,j;
   cin>>n>>m;
   for(i=0;i<n;i++)cin>>a[i];
   
   for(i=0;i<m;i++)cin>>b[i];

    memset(dp,-1,sizeof(dp));
  
   int ans=lcs(0,0);
   cout<<ans;

   
}
return 0;
}
