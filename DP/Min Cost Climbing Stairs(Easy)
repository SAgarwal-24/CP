// https://leetcode.com/problems/min-cost-climbing-stairs/
// Min Cost Climbing Stairs
// Simple intuitive recurence and store values and question qualifies of dp tag...xd

class Solution {
public:
    
    int dp[1001];
    int n=0;
    
    int fun(int i,vector<int>cost){
        
        //base cases
        if(i>=n) return 0;
        if(dp[i]!=-1)return dp[i];
        
        // rec case
        return dp[i]=cost[i]+min(fun(i+1,cost),fun(i+2,cost));
    }
    
    int minCostClimbingStairs(vector<int>& cost) {
        
        memset(dp,-1,sizeof(dp));
        n=cost.size();
        
      /*  int c=fun(0, cost);  --- Top down approach 
        return min(dp[0],dp[1]); */
        
      
        
        // bottom up
        dp[0]=0, dp[1]=0;
        for(int i=2;i<=n;i++){
            dp[i]=min(dp[i-1]+cost[i-1],dp[i-2]+cost[i-2]);
        }
        
        return dp[n];
        
    }
};

/*  TC
Input: cost = [10,15,20]
Output: 15

Input: cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6
*/
