/*
Minimum sum partition  (1-D dp array implementation) 

https://practice.geeksforgeeks.org/problems/minimum-sum-partition3317/1#


instead of making dp[n+1][sum+1] and make a space optimised solution we have two options
case-1. dp[2][sum+1]
case-2. dp[sum+1]

case-1
Implementation is same like 

for(int i=1;i<=n;i++) 
{
   for(int j=1;j<=s;j++){}  // moving from front to back
   
   for(int j=1;j<=s;j++){   // make Oth array as last updated array each time 
   t[0][j]=t[1][j]; }    
           
}


case-2
Implementation is  like 
 for(i=1;i<=n;i++)
	       for(j=sum;j>=a[i-1];j--)   // moving from back to front


*/


#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution{

	public:
	int minDiffernce(int a[], int n) 
	{ 
	   int i,j, sum=0;
	   for(i=0;i<n;i++)sum+=a[i];
	   
	   int ans=sum;
	   
	   // n-items and S=Weight ... kind of knapsack problem..make subsets by making a choice of include or exclude 
	   // minimize abs(s1-s2) where s1=sum of 1st subset and s2 for other
	   // s1+s2 = sum so s1-s2=sum-2*s2
	   // so we need 2 subsets with s1 and sum-s1 as their sum
	   // and find all possible s1 which will be < 10^6
	   
	   int t[sum+1];
	   memset(t,0,sizeof(t));
	   
	  // S=0 can be achieved always by not choosing anyone 
	   
	   t[0]=1;
	 
	   
	   for(i=1;i<=n;i++){
	       for(j=sum;j>=a[i-1];j--){               // Remember to always move from back when doing using 1-D dp  in 0-1 based knapsack 
	           t[j] = max(t[j],t[j-a[i-1]]);       // bcz when we move from front in 1-D dp it will make it unbound knapsack
	       }                                      // ie instead of counting element once it will count it more than once and hence leads to Wrong answer
	   }
	   
	   for(j=0;j<=sum;j++){
	       
	       if(t[j]==1)
	       ans=min(ans,abs(sum-2*j));
	   }
	   
	   return ans;
	} 
};


// { Driver Code Starts.
int main() 
{
   
   
   	int t;
    cin >> t;
    while (t--)
    {
        int n;
        cin >> n;

        int a[n];
        for(int i = 0; i < n; i++)
        	cin >> a[i];

       

	    Solution ob;
	    cout << ob.minDiffernce(a, n) << "\n";
	     
    }
    return 0;
}  // } Driver Code Ends
