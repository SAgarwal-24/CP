//Maximize The Cut Segments
// (Unbounded Knapsack) like COIN CHANGE problem
// https://practice.geeksforgeeks.org/problems/cutted-segments1642/1#

#include<bits/stdc++.h>
using namespace std;


class Solution
{
    public:
    
    int dp[10001]={0};
    
    Solution(){
        memset(dp,-1,sizeof(dp));
        dp[0]=0;
    }
    
    //Function to find the maximum number of cuts.
    // dp[i]=max cuts for len i
    //-------------Note----------
    
    // Maximize the Cut Segments of Rod of length=n
    // This problem is similar to COIN CHANGE PROBLEM (ie knapsack)
    
    // Similarity 
    // Rod len = n   is  equivalent to   Money=M (to be changed)
    
    // x,y,z  are equivalent to coins[] array 
    
    // in coin problem we have to pay money M with some subsequence of coins[]
    // and in Rod problem we have make a subsequence of x,y,z (unbounded knapsack) to make length =n
    // in both problem unbounded knapsack has been used
    
    
    
    int f(int n, int x, int y, int z)
    {
        
        
        if(n<0)return INT_MIN;
        
        if(dp[n]!=-1)return dp[n];
        
        int op1=-1,op2=-1, op3=-1;
        
    
         op1=f(n-x,x,y,z);
         
         op2=f(n-y,x,y,z);
         
         op3=f(n-z,x,y,z);
        
        dp[n]=1+max(op1,max(op2,op3));
        
     
        
        int ans=dp[n];
        return ans;
    }
    
    int maximizeTheCuts(int n, int x, int y, int z){
        
       /*  int a=f(n,x,y,z);  Memoized dp solution 
       return (a<0)?0:a; */
       
       // Bottom up dp solution - little variation of unbounded knapsack 
       vector<int>v(3); 
       v[0]=x, v[1]=y, v[2]=z;
       
       int dp[n+1];
       memset(dp,-1,sizeof(dp));
       dp[0]=0; // we can achieve 0 length rod with 0 number of cuts
       
       for(auto len:v){
           
           for(int i=len;i<n+1;i++){ // since it is unbounded knapsack we move from front to back as we can consider item multiple times
           
               
               if(dp[i-len]>=0)      // intutition is we can achieve "i" len rod from "(i-len)" rod if it exits by appending "len" length piece in dp[i] no of  segments
               dp[i]=max(dp[i],dp[i-len]+1);
           
               
           }
           
        //   for(int i=0;i<n+1;i++){   uncoment to see how 
        //       cout<<dp[i]<<" ";
        //   }
        //   cout<<endl;
           
       }
       
       int a=dp[n];
        
        return (a<0)?0:a;
    }
};

// { Driver Code Starts.
int main() {
    
    //taking testcases
    int t;
    cin >> t;
    while(t--)
    {
        //taking length of line segment
        int n;
        cin >> n;
        
        //taking types of segments
        int x,y,z;
        cin>>x>>y>>z;
        Solution obj;
        //calling function maximizeTheCuts()
        cout<<obj.maximizeTheCuts(n,x,y,z)<<endl;

    }

	return 0;
}  // } Driver Code Ends
