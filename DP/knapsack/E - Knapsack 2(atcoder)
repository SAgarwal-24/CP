/*

- https://atcoder.jp/contests/dp/tasks/dp_e
- Instead of standard knapsack where we have to make dp[sum_of_wt_subsequence]=max_val_subsequence 
  here it is opposite due to constraints             dp[sum_of_val_subsequence]=min_wt_subsequence 

*/

#include <bits/stdc++.h>
using namespace std;
#define endl "\n" 
#define int long long
#define pi (3.141592653589)
#define mod 1000000007
#define watch(x) cout << (#x) << " is " << (x) << endl
#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);


int32_t main(){
    
   
    fast
    int tc=1;
   // cin>>tc;

    while(tc--){

        int j,i,n,W,sum=0;

        cin>>n>>W;

        int val[n+1]={0};
        int wt[n+1]={0};
        for(i=1;i<=n;i++){
            cin>>wt[i]>>val[i];
            sum+=val[i];
        }

        int dp[100005];
      

        for(i=0;i<=sum;i++){
            dp[i]=1e10;
        }

        dp[0] = 0;

        for(i=1;i<=n;i++){

            for(j=sum;j>=val[i];j--){

                int tem = dp[j-val[i]] + wt[i];

                if( tem <= W)
                {
                  
                    dp[j] = min(dp[j] , tem);
                  
                }

            }

        }

    

        int ans=0;

        for(i=sum;i>=0;i--){

            if(dp[i]<=W)
            {
                ans=i;
                break;
            }
        }

        cout<<ans<<endl;

        
    }


return 0;
}
