/*
Notice - in bfs approach for Topological Sorting we don't need to maintain visited[] array as there is no redundancy as 
we are removing only edges each time we are reducing a indegree so  if a node is encountered multiple times it means there multiple incoming edges on that node
so we have to remove each time which is not redundant work while in dfs(topo. sorting) we have to maintain as it in dfs visiting multiple time already explored and processed node is redundant work.

*/

#include <bits/stdc++.h>
using namespace std;

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	
	
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    
	    int indegree[V]={0};
	    
	    
	    for(int node=0;node<V;node++){
	        
	        for(auto child:adj[node]){
	            
	            indegree[child]++;
	        }
	    }
	    
	    queue<int>q;
	    
	    for(int node=0;node<V;node++){
	        if(indegree[node]==0){
	            q.push(node);
	        }
	    }
	    
	    vector<int>ans;
	    
	    while(!q.empty()){
	        
	        int node = q.front(); 
	        q.pop();
	        
	        ans.push_back(node);
	        
	        for(auto nbr:adj[node]){
	                      
	            indegree[nbr]--;
	            
	            if(indegree[nbr]==0)
	            q.push(nbr);
	            
	        }
	        
	    }
	   
	    return ans;
	}
};



/*  Function to check if elements returned by user
*   contains the elements in topological sorted form
*   V: number of vertices
*   *res: array containing elements in topological sorted form
*   adj[]: graph input
*/

int check(int V, vector <int> &res, vector<int> adj[]) {
    vector<int> map(V, -1);
    for (int i = 0; i < V; i++) {
        map[res[i]] = i;
    }
    for (int i = 0; i < V; i++) {
        for (int v : adj[i]) {
            if (map[i] > map[v]) return 0;
        }
    }
    return 1;
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int N, E;
        cin >> E >> N;
        int u, v;

        vector<int> adj[N];

        for (int i = 0; i < E; i++) {
            cin >> u >> v;
            adj[u].push_back(v);
        }
        
        Solution obj;
        vector <int> res = obj.topoSort(N, adj);

        cout << check(N, res, adj) << endl;
    }
    
    return 0;
} 
