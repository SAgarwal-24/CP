#include <bits/stdc++.h>
using namespace std;

class Solution
{
	public:
  
	//Function to return list containing vertices in Topological order. 
  
	int vis[10001]={0};
	stack<int>st;
	int V=0;

	void dfs(int node,int V,vector<int>adj[]){
	    
	    if(vis[node])return;
	    
	    vis[node]=1;
	    
	    for(int nbr:adj[node]){
	        
	        if(vis[nbr]==0){
	            dfs(nbr,V,adj);
	        }
	    }
	    
	    st.push(node);
	    
	}
	
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    this->V=V;
	    //print(adj);
	    
	    for(int node=0;node<V;node++){
	        
	        if(vis[node]==0){
	            dfs(node,V,adj);
	        }
	    }
	    
	    vector<int>ans;
	    while(!st.empty()){
	        ans.push_back(st.top()); st.pop();
	    }
	    
	   // reverse(ans.begin(),ans.end());
	    
	   // for(auto d:ans)cout<<d<<" ";
	   // cout<<"\n";
	    
	    return ans;
	}
  
  
  void print(vector<int>adj[]){
	    
	   // int n=adj.size();
	    for(int i=0;i<V;i++){
	        cout<<i<<"=> ";
	        for(auto x:adj[i]){
	            cout<<x<<" ";
	        }
	        cout<<"\n";
	    }
	    cout<<"\n";
	}
  
};

// --------- Driver Code Starts.

/*  Function to check if elements returned by user
*   contains the elements in topological sorted form
*   V: number of vertices
*   *res: array containing elements in topological sorted form
*   adj[]: graph input
*/
int check(int V, vector <int> &res, vector<int> adj[]) {
    vector<int> map(V, -1);
    for (int i = 0; i < V; i++) {
        map[res[i]] = i;
    }
    for (int i = 0; i < V; i++) {
        for (int v : adj[i]) {
            if (map[i] > map[v]) return 0;
        }
    }
    return 1;
}

int main() {
    int T;
    cin >> T;
    while (T--) {
        int N, E;
        cin >> E >> N;
        int u, v;

        vector<int> adj[N];

        for (int i = 0; i < E; i++) {
            cin >> u >> v;
            adj[u].push_back(v);
        }
        
        Solution obj;
        vector <int> res = obj.topoSort(N, adj);

        cout << check(N, res, adj) << endl;
    }
    
    return 0;
}  
