/* 
Link:
https://leetcode.com/problems/swim-in-rising-water/

 Swim in Rising Water
 ------------

Use struct for clean and concise code

 - Dijkstra based approach
 - Since difference between bfs and dikstra is 
 -  bfs   : is queue based
 - dikstra: is priority_queue based
 
 - here Priority is according to elevation of cell (i,j) 
  -which is implemented using priority compartor (min heap based)
  
  -------------------- To see processing (for newbies specially) -----
  
  -in code ,inside while loop uncomment the printing priority queue portion for each iteration
  - observe that top element has least value or least elevation
  

*/
class Solution {
public:
    
    struct cell{
        int x;
        int y;
        int val;
    };
    
    struct cmp{
      bool operator()(cell s1,cell s2){
            return s1.val>s2.val;
        }
    };
    
    void print(priority_queue<cell,vector<cell>,cmp>pq){
        
        while(!pq.empty()){
            struct cell obj=pq.top(); pq.pop();
            cout<<"x="<<obj.x<<", y="<<obj.y<<",  val="<<obj.val<<endl;
        }
    }
    
    int swimInWater(vector<vector<int>>& a) {
        
        int n=a.size(), i, j, ans=-1;
        
        //priority queue with min-heap  ie minimum value of a[i][j] (elevation height)
        priority_queue<cell,vector<cell>,cmp>pq;
        

        int has[n][n];
        memset(has,0,sizeof(has));
        
         struct cell obj;
         obj.x=0, obj.y=0, obj.val=a[0][0];
        
         pq.push(obj);
        
         ans=-1;
         int it=1;
         while(!pq.empty()){
             
               cout<<"iteration: "<<it<<endl;
              it++;
               print(pq);     //  Uncomment to understand elements in a iteration of priority queue 
               cout<<"-----\n";
             
             obj=pq.top(); pq.pop();
             
             i=obj.x, j=obj.y;
             ans=max(ans,obj.val); 
             
             if(i==n-1 and j==n-1)break;
             
             has[i][j]=1;
             
             if(i-1>=0 and has[i-1][j]==0)pq.push({i-1,j,a[i-1][j]});
             if(j-1>=0 and has[i][j-1]==0)pq.push({i,j-1,a[i][j-1]});
             if(j+1<n and has[i][j+1]==0)pq.push({i,j+1,a[i][j+1]});
             if(i+1<n and has[i+1][j]==0)pq.push({i+1,j,a[i+1][j]});
             
             
         }
        
        return ans;
    }
};
