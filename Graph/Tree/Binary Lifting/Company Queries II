//link: https://cses.fi/problemset/task/1688/
//sol: https://cses.fi/paste/75124ba4ffa3f7413110e0/

//simple problem -> to find lca b/w nodes

#include <bits/stdc++.h>
using namespace std;
#define endl "\n"
#define int long long
#define pb push_back
#define all(c) c.begin(), c.end()
#define vi vector<int>
#define vvi vector<vector<int>>
#define watch(x) cout << (#x) << " is " << (x) << endl
#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 

 
class tree{

    int n=0, h=0;
    vvi adj;
    vvi up;
    vi depth;

    public:
      
    tree(int n){
        this->n = n;
        this-> h = ceil(log2(n));

        adj = vvi (n+1);
        up = vvi (n+1, vi (h, 0));
        depth = vi (n+1, 0);
    }

    void add_edge(int u, int v){
        adj[u].pb(v);
        adj[v].pb(u);
    }

    void dfs(int node,  int par){

        for(auto nbr: adj[node]){
            if(nbr==par)continue;
            
            depth[nbr] = depth[node] + 1;
            up[nbr][0] = node;

            //precomputation of sparse table for binary lifting
            for(int j=1; j<h; j++){
                up[nbr][j] = up[ up[nbr][j-1] ][j-1];
            }

            dfs(nbr,  node);
        }
    }

 

    int get_kth_ancestor(int node, int k){

        if(k>depth[node])
          return -1;

        int p=0;

        while(k){
            
            if(k&1){
                node = up[node][p];
            }

            k=k>>1;
            p+=1;
        }

        return node;
    }

    int lca(int u, int v){
        
        if(depth[u] > depth[v])
          swap(u,v);

        int k = depth[v]-depth[u];
        v = get_kth_ancestor(v, k);

        if(u==v)
            return u;

        for(int j=h-1; j>=0; j--){

            if(up[u][j] != up[v][j]){
                u = up[u][j];
                v = up[v][j];
            }
        }

        return up[u][0];
    }
    
};




 void solve(){

    int i, n, k, q;
    cin>>n>>q;
   

    tree g(n);

     for(i=2;i<=n;i++){
         int u;
         cin>>u;
        g.add_edge(u,i);
     }

    g.dfs(1, 0);

    for(i=0;i<q;i++){
        int u, v;
        cin>>u>>v;

        cout<<g.lca(u,v)<<endl;
    }
    
    
    
}

// Fuck rating 
// enjoy process and improvement(by red coders like colin)
 
int32_t main()
{
    fast int tc = 1;
    // cin >> tc;
 
 
    while (tc--)
    {
        solve();
    }
 
 
    return 0;
}

