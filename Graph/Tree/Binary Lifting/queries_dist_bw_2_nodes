//link:https://cses.fi/problemset/task/1135/
//sol: https://cses.fi/paste/c1402ed2618330a5310892/

#include <bits/stdc++.h>
using namespace std;
 
#define endl '\n' 
#define int long long 
#define pb push_back
#define ff first
#define ss second
#define vi vector<int>
#define vvi vector<vector<int>>
#define watch(x) cout << (#x) << " -> "  << (x) << endl
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define all(x) (x).begin(), (x).end()
#define sz(x) ((ll)(x).size())

/*  explaination 

    - make sure we have adjaceny list of N=2e5
    - call dfs to do precomputation required for binary lifting sparse table
*/


class tree{

    int n=0, h=0;
    vi adj[200001];
    vvi up;
    vi depth;

    public:
      
    tree(int n){
        this->n = n;
        this-> h = ceil(log2(n));

        up = vvi (n+1, vi (h, 0));
        depth = vi (n+1, 0);
    }

    void add_edge(int u, int v){
        adj[u].pb(v);
        adj[v].pb(u);
    }

    void dfs(int node,  int par){
        //dfs for precomputation
        for(auto nbr: adj[node]){
            if(nbr==par)continue;
            
            depth[nbr] = depth[node] + 1;
            up[nbr][0] = node;

            //precomputation of sparse table for binary lifting
            for(int j=1; j<h; j++){
                up[nbr][j] = up[ up[nbr][j-1] ][j-1];
            }

            dfs(nbr,  node);
        }
    }

    int get_kth_ancestor(int node, int k){
        int p=0;

        while(k){
            
            if(k&1){
                node = up[node][p];
            }

            k=k>>1;
            p+=1;
        }

        return node;
    }

    void print_info(){
        
        //exploring all kth ancestors
        for(int i=1; i<=n; i++){

            cout<<"node: "<<i<<endl;

            for(int k=1; k<=depth[i]; k++){ 

                cout<<k<<" ancestor of node "<<i<<" is: "<<get_kth_ancestor(i, k)<<endl;
            }
        }
    }

    int lca(int u, int v){

        if(depth[u]>depth[v])
          swap(u,v);

        //bring u,v to same lvl 
        int k = depth[v]-depth[u];
        v = get_kth_ancestor(v, k);

        if(u == v)  
            return u;

        for(int j=h-1; j>=0; j--){
            
            if(up[u][j] != up[v][j]){
                u = up[u][j];
                v = up[v][j];
            }
        }

        return up[u][0];
    }

    int distance(int a, int b){ 
        //distance b/w pair of nodes 'a' and 'b'

        return depth[a] + depth[b] - 2*depth[lca(a,b)];
    }

    void lca_of_all_pairs(){

        for(int u=1; u<=n; u++){
            for(int v=1; v<=n; v++){

                if(u==v)continue;

                cout<<"lca of "<<u<<","<<v<<": "<<lca(u,v)<<endl;

            }

            cout<<endl;
        }
    }

    void dis_of_all_pairs(){

        for(int u=1; u<=n; u++){
            for(int v=1; v<=n; v++){

                if(u==v)continue;

                cout<<"dist b/w "<<u<<","<<v<<": "<<distance(u,v)<<endl;

            }

            cout<<endl;
        }
    }
};



void solve(){

    int i, n, q;
    cin>>n>>q;

    tree g(n);

    for(i=0;i<n-1;i++){
        int u,v;
        cin>>u>>v;
        g.add_edge(u,v);
    }

    g.dfs(1,0);
    // g.print_info();

    for(i=0;i<q;i++){
        int u, v;
        cin>>u>>v;
        cout<<g.distance(u,v)<<endl;
    }
}



// Fuck rating 
// enjoy process and improvement(by red coders like colin)
int32_t main()
{
    fast_cin();
    int tc=1;
    // cin >> tc;
    while (tc--) 
     {
        solve();
     }
    return 0;
}
