#include <bits/stdc++.h>
using namespace std;
#define endl "\n"
#define int long long
#define ll long long
#define pi (3.141592653589)
#define mod 1000000007
#define float double
#define pb push_back
#define mp make_pair
#define ff first
#define ss second
#define all(c) c.begin(), c.end()
#define vi vector<int>
#define vvi vector<vector<int>>
#define min3(a, b, c) min(c, min(a, b))
#define min4(a, b, c, d) min(d, min(c, min(a, b)))
#define rfo(i, a, b) for (int i = (int)a; i >= (int)b; i--)
#define fo(i, a, b) for (int i = (int)a; i <= (int)b; i++)
#define watch(x) cout << (#x) << " is " << (x) << endl
#define see(x) cout << (x) << endl
#define hh cout << endl
#define INF 1e18
#define fast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);
 
template <typename C,
          typename T = std::decay_t<decltype(*begin(std::declval<C>()))>,
          typename std::enable_if<!std::is_same<C, std::string>::value>::type * = nullptr>
std::ostream &operator<<(std::ostream &os, const C &container)
{
    bool first = true;
    std::stringstream ss;
    ss << '[';
    for (const auto &x : container)
    {
        if (!first)
        {
            ss << ", ";
        }
        first = false;
        ss << x;
    }
    ss << ']';
    return os << ss.str();
}
template <class T1, class T2>
std::ostream &operator<<(std::ostream &os, const std::pair<T1, T2> &p)
{
    os << '{' << p.first << ", " << p.second << '}';
    return os;
}
 

const int N = 1e5+2;
vi tree[N+1];
int up[N][18];
vi depth(N);

void dfs(int node,  int par){

    up[node][0] = par;

    for(int j=1; j<18; j++){

        up[node][j] = up[ up[node][j-1] ][j-1];
    }

    for(auto nbr: tree[node]){
        
        if(nbr==par)continue;

        depth[nbr] = depth[node] + 1;
        dfs(nbr, node);
    }
}

int get_kth_ancestor(int node, int k){

    // for(int i=0;)
    int i=0;

    while(k){

        if(k&1)
        node = up[node][i];

        i++;
        k = k>>1;
    }

    return node;
}

 void solve(){

     int i, n, j, k;
     cin>>n;       //no of nodes in tree

     for(i=1;i<n;i++){  //n-1 edges of tree
         int u,v;
         cin>>u>>v;
         
         tree[u].pb(v);
         tree[v].pb(u);
     }

    for(i=0;i<18;i++){
        up[0][i] = 0;
    }
    
    dfs(1,0);

    //sparse table for binary lifting 
    for(i=0;i<=n;i++){
        cout<<i<<"-> ";

        for(j=0;j<18;j++){
            cout<<up[i][j]<<" ";
        }    

        cout<<endl;
    }

    //depth of each node
    cout<<"\n\n depth: ";
    for(i=1;i<=n;i++){
        cout<<depth[i]<<" ";
    }
    cout<<"\n\n";

    //exploring all kth ancestors
    for(i=1; i<=n; i++){

        cout<<"node: "<<i<<endl;

        for(k=1; k<=depth[i]; k++){ //explore till 4th ancestors

            cout<<k<<" ancestor of node "<<i<<" is: "<<get_kth_ancestor(i, k)<<endl;
        }
    }
}

// Fuck rating 
// enjoy process and improvement(by red coders like colin)
 
int32_t main()
{
    fast int tc = 1;
    // cin >> tc;
 
 
    while (tc--)
    {
        solve();
    }
 
 
    return 0;
}

/*

INPUT Format: 
 1st line: n nodes 
 next n-1 lines contains (u,v) edges 

Analysis of a INPUT

    I/P:
    10 
    1 2
    1 5
    2 3
    5 6
    5 7
    3 8
    3 4
    4 9
    7 10

    //sparse table for binary lifting 

         1 2 4 8 16 32 ..
         0 1 2 3 4 5 6 ......
	0->  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	1->  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	2->  1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	3->  2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	4->  3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	5->  1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	6->  5 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	7->  5 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	8->  3 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	9->  4 3 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
	10-> 7 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0


    
//node: 1 2 3 4 5 6 7 8 9 10
 depth: 0 1 2 3 1 2 2 3 4 3 

//ancestors of node (not more than there depth)

node: 1
node: 2
1 ancestor of node 2 is: 1
node: 3
1 ancestor of node 3 is: 2
2 ancestor of node 3 is: 1
node: 4
1 ancestor of node 4 is: 3
2 ancestor of node 4 is: 2
3 ancestor of node 4 is: 1
node: 5
1 ancestor of node 5 is: 1
node: 6
1 ancestor of node 6 is: 5
2 ancestor of node 6 is: 1
node: 7
1 ancestor of node 7 is: 5
2 ancestor of node 7 is: 1
node: 8
1 ancestor of node 8 is: 3
2 ancestor of node 8 is: 2
3 ancestor of node 8 is: 1
node: 9
1 ancestor of node 9 is: 4
2 ancestor of node 9 is: 3
3 ancestor of node 9 is: 2
4 ancestor of node 9 is: 1
node: 10
1 ancestor of node 10 is: 7
2 ancestor of node 10 is: 5
3 ancestor of node 10 is: 1

*/
