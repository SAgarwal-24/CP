//link:  https://codeforces.com/contest/1325/problem/C
//sol : https://codeforces.com/contest/1325/submission/138350399 (for clean solution see others code)


#include <bits/stdc++.h>
using namespace std;
 
#define endl '\n' 
#define int long long 
#define pb push_back
#define ff first
#define ss second
#define vi vector<int>
#define watch(x) cout << (#x) << " -> "  << (x) << endl
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define all(x) (x).begin(), (x).end()
#define sz(x) ((ll)(x).size())

template <typename C,
          typename T = std::decay_t<decltype(*begin(std::declval<C>()))>,
          typename std::enable_if<!std::is_same<C, std::string>::value>::type * = nullptr>
std::ostream &operator<<(std::ostream &os, const C &container)
{
    bool first = true;
    std::stringstream ss;
    ss << '[';
    for (const auto &x : container)
    {
        if (!first)
        {
            ss << ", ";
        }
        first = false;
        ss << x;
    }
    ss << ']';
    return os << ss.str();
}
template <class T1, class T2>
std::ostream &operator<<(std::ostream &os, const std::pair<T1, T2> &p)
{
    os << '{' << p.first << ", " << p.second << '}';
    return os;
}

/*  explaination 

observe: 2<=longest_path<=n-1 and see below analysis of scenario of largest_mex according to longest_path value

-> also longest_path can be observed from largest_degree_of_node

 if (largest_degree_of_node -> increases)
  then (longest_path -> decreases)  


eg: n=6

1-2-3-4-5-6        longest_path = 5 = n-1 -> (mex=n-1 , since edges labelled 0-1-2-3-4 are on same path)
        
        5
       /
1-2-3-4            longest_path = 4   -> (mex=2 which will come bcz on one of the path we have both labels 0 and 1)
       \
        6

        5
       /
  1-2-3-4          longest_path = 3 -> (mex=2)
       \
        6


       4  5
       | /
    1- 2---3       longest_path = 2 -> (mex=2)
        \
         6



*/


const int N = 1e5+2;
vi tree[N];

int farthest_node=0, mx_dis=-1;

void  dfs(int node,int par , int dis){

    if(mx_dis<dis){
        mx_dis = dis;
        farthest_node = node;
    }

    for(auto nbr: tree[node]){

        if(nbr==par)continue;

        dfs(nbr, node, dis+1);
    }
}

map<pair<int,int>, int>label;

void solve(){

    int i, n;
    cin>>n;

    vi degree(n+1,0);

    vector<pair<int,int>>edges;

    int largest_degree= 0;
    int largest_deg_node = -1; //node with largest degree

    for(i=0;i<n-1;i++){
        int u,v;
        cin>>u>>v;

        tree[u].pb(v);
        tree[v].pb(u);

        

        degree[u]++;
        degree[v]++;

        if(largest_degree < degree[u]){
            largest_degree = degree[u];
            largest_deg_node = u;
        }

        if(largest_degree < degree[v]){
            largest_degree = degree[v];
            largest_deg_node = v;
        }

        if(u>v)
            swap(u,v);

        edges.pb({u,v});

        label[{u,v}] = -1;
    }

    // bool flag=false;
  
//    watch(degree);

    int c=0;

    if(largest_degree>=3){

        // watch(largest_deg_node);

        int u=largest_deg_node;
        int v=tree[u][0];

        if(u>v)
         swap(u, v);

        // cout<<"u,v: "<<u<<", "<<v<<endl;

        label[{u,v}]=0;
        
        //----------

        u=largest_deg_node;
        v=tree[u][1];

        if(u>v)
         swap(u, v);

        // cout<<"u,v: "<<u<<", "<<v<<endl;
        label[{u,v}]=1;

        // -------

        u=largest_deg_node;
        v=tree[u][2];

        if(u>v)
         swap(u, v);

        // cout<<"u,v: "<<u<<", "<<v<<endl;
        label[{u,v}]=2;

        c=3;
    }

    // watch(label);

 
    for(auto par:label){

        // watch(par.second);

        if(par.second == -1){
            // par.second = c;
            label[par.first] = c;
            c++;
        }

        // if(c==1 and flag)
        //  c=3;
    }

    //  watch(label);

    for(auto par:edges){
        int u=par.first;
        int v=par.second;

        cout<<label[{u,v}]<<endl;
    }

   /* 
    dfs(1,-1, 0);

 
    mx_dis = -1;
    dfs(farthest_node, -1, 0);

    int longest_path = mx_dis;
    int largest_mex=-1;

    if(longest_path == n-1){
        largest_mex = n-1;
    }
    else{
        largest_mex = 2; //as there will be always a path having both 0 and 1 on it, we can't seperate them in any case        
    }

    cout<<largest_mex<<endl;
    */

    
}



// Fuck rating 
// enjoy process and improvement(by red coders like colin)
int32_t main()
{
    fast_cin();
    int tc=1;
    // cin >> tc;
    while (tc--) 
     {
        solve();
     }
    return 0;
}
