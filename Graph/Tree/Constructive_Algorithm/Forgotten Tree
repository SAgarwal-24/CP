//Constructing tree from 3 parameters -> nodes,diameter,height
//edge case was -> diameter = height (think it's easy)

#include <bits/stdc++.h>
using namespace std;
 
#define endl '\n' 
#define int long long 
#define ll long long 
#define pi (3.141592653589) 
#define mod 1000000007 
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define INF 2e18
#define vi vector<int>
#define vvi vector<vector<int>>
#define watch(x) cout << (#x) << " -> "  << (x) << endl
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define all(x) (x).begin(), (x).end()
#define sz(x) ((ll)(x).size())
#define inputarr(arr, n) for (ll i = 0; i < n; i++) cin >> arr[i];
#define printarr(arr, n) for (ll i = 0; i < n; i++) cout << arr[i] << ' ';
 

void solve() {
     int i, nodes, diameter, height; 
     cin>>nodes>>diameter>>height;

     if(nodes==2){
         //diameter = height = 1 
         cout<<1<<" "<<2<<endl;
         return;
     }

    assert(nodes>=3);

    if(diameter==1 || diameter>2*height){
        cout<<-1;
        return;
    }

    vi parent(nodes+1,-1);

    int p_node=1, c_node=2, l_node=1;

    int n1=height, n2 = diameter-height;

  /* Some Cases 

    if(height==1){ 
       -> nodes = 2 
       -> diameter = 1(n=2 already handled)
       -> n1=0, n2=0;
    }

    nodes>=3 
    if(diameter == height){
       -> 1-2-3...(till len=n1)
       -> for remaining nodes
             n2=0 and p_node = 2 
    }
    else{ 
        ie diameter>height
        -> n1 length path
        -> n2 length path
        -> for remaining nodes
             p_node=1
    }
 */


    while(n1>0){
        parent[c_node] = p_node;
        p_node = c_node;
        c_node++;
        n1--;
    }

    if(n2==0) //ie diameter = height 
     {
        p_node = 2;
        goto remaining_nodes ;
     } 
    
    p_node = 1; 

    while(n2>0){
        parent[c_node] = p_node;
        p_node = c_node;
        c_node++;
        n2--;
    }

    p_node = 1;

remaining_nodes:
    while(c_node<=nodes){
        parent[c_node]=p_node;
        c_node++;
    }

    for(c_node=2; c_node<=nodes; c_node++){
        cout<<parent[c_node]<<" "<<c_node<<endl;
    }

    

}

 
int32_t main()
{
    fast_cin();
    ll tc=1;
    // cin >> tc;
    while (tc--) 
     {
        solve();
     }
    return 0;
}
