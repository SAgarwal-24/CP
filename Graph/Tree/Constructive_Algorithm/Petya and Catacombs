//link: https://codeforces.com/contest/886/problem/C
//sol link: https://codeforces.com/contest/886/submission/137904139

//question language was tough and not intuitive to understand , but concept is cool and awesome 

#include <bits/stdc++.h>
using namespace std;
 
#define endl '\n' 
#define int long long 
#define ll long long 
#define pb push_back
#define vi vector<int>
#define watch(x) cout << (#x) << " -> "  << (x) << endl
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define all(x) (x).begin(), (x).end()

/*

Some testcases

time -> 0    1     2    3     4
Room->  0    1     0    1     0
dairy->      0     0    2     2
---------------------------------
time -> 0    1     2    3     4     5    6
Room->  0    1     0    1     0     0    0
dairy->      0     0    2     2     4    5
----------------------------------------------------
time -> 0    1     2    3     4     5    6         7
Room->  0    1     0    1     0     0    0         1
dairy->      0     0    2     2     4    5         3
----------------
time -> 1     2
dairy-> 0     1
----------------
n=1
i/p->   0
o/p:->  1 
---------------
input:
2
0 1
----------------
-self loops are allowed ie 'petya' can remain in one room for eternal time if needs
ie in other words

time -> 0    1     2    3     4  (for each instant of time petya was in Room=0 only)
Room->  0    0     0    0     0 
dairy->      0     1    2     3  (dairy[i]=last instant of Room[i] in which currently petya is)
-------------------------------------


Some Cases / Scenarios

 - 'petya' is in one room only (not switching rooms) - then last second of visit for that room keeps changing
 


# Some of My thoughts

- there are 2 rules
   Rule-1: He go to already visited room  
   Rule-2: He goes to new room

- Since we want to know minimum number of rooms
  - then at each instant we try to apply rule-1 
  - otherwise if we apply rule-2 then cnt_of_min_rooms will increase
  - we will go with rule-2 only when we are forced ie we can't apply rule-1

- Now
 when for 1st instant(t=1)
   - t1 = 0   is the only possible value (ie 0<1)
   - this also signifies cnt_of_min_rooms=1 atleast. //cnt_of_min_rooms = final_answer

----------

#Example

Let's take a example to understand the problem

- suppose in his dairy he notes as follows
        for t1 instant      he is in room x and notes "val=0" in his diary 
        for t2 instant also he is in room x and notes "val=0" in his diary 

time->     t1    t2    t3    t4    t5    t6
dairy->     0    0                            (dairy_noted_value)
room->      x    x

- is this assumption possible ?? lets think

  at t=t1 -> dairy = 0 ,  room = x  -> this means last instant of room 'x' is t1 

  so at t=t2 -> we consider 'room = x' as already visited having last instant t=t1
  so by this logic in his dairy he should note as -> dairy = 1 (as last instant = 1 for room x)
  
  but in the example he noted it as dairy=0 which shows "contradiction" with our assumption
  ie our assumption that he is in room=x at both instant t=t1 and t=t2 is "completely wrong"

  So now we can safely conclude that (as mentioned in editorial)
  ie rooms at t=t1 and t=t2 are different
  ie at atleast one of the room at t=t1 and t=t2 is new_room 
  

   if ->                                           ti = tj  (i<j)
   in other words ->          dairy_noted_value_at_ti = dairy_noted_value_at_tj

   then at least one of them is new room 
   Note: (though we can consider both as new room but since we want minimum_no_of_rooms_possible 
          we are minimising our answer from 2 new_rooms to 1 new_room and we can't minimise more than that)


so finally correct scenario is 
 t=t1  room=x
 t=t2  room=y  and x!=y  and y->is new room

time->     t1    t2    t3    t4    t5    t6
dairy->     0    0                            (dairy_noted_value)
room->      x    y

*/


void solve() {

    int i, n; 
    cin>>n;

    int fre[n+5]={0};

    int ans=0;

    for(i=1;i<=n;i++){
        int entry;
        cin>>entry;

        fre[entry] += 1;

        // cout<<entry<<", "<<fre[entry]<<endl;

        ans += fre[entry]>1;
    }

    cout<<ans+1;


}

 
int32_t main()
{
    fast_cin();
    ll tc=1;
    // cin >> tc;
    while (tc--) 
     {
        solve();
     }
    return 0;
}
