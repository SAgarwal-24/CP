//link: https://www.spoj.com/problems/TREEORD/
//sol link: https://ideone.com/cOIFfp

//main challenge was using indexing properly during dfs

#include <bits/stdc++.h>
using namespace std;
 
#define endl '\n' 
#define int long long 
#define ll long long 
#define pi (3.141592653589) 
#define mod 1000000007 
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define INF 2e18
#define vi vector<int>
#define vvi vector<vector<int>>
#define watch(x) cout << (#x) << " -> "  << (x) << endl
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define all(x) (x).begin(), (x).end()
#define sz(x) ((ll)(x).size())
#define inputarr(arr, n) for (ll i = 0; i < n; i++) cin >> arr[i];
#define printarr(arr, n) for (ll i = 0; i < n; i++) cout << arr[i] << ' ';
 
int N=8005;

vi pre(N), post(N), in(N);
int n=0;

int p1=0, p2=0;

bool fun(int p1, int p2, int st, int end){


 
    if (pre[p1] != post[p2]){
        
        return false;
    }

    int root = pre[p1];
    int l=0, r=0, pos=-1;

    for(int j=st; j<=end; j++){

        if(in[j]==root){
            pos=j;
            break;
        }
    }

    int l_cnt = max( 0LL, pos-st );
    int r_cnt = max( 0LL, end-pos);

    bool f1=true, f2=true;

  
   if(l_cnt>0){

       f1 = fun(p1+1, p2-1-r_cnt, st, pos-1);
   }
    
    if(r_cnt>0){

      f2 = fun(p1+1+l_cnt, p2-1, pos+1, end);
   }

   return f1 && f2;
}


void solve() {
     int i; 
     cin>>n;

     for(i=1;i<=n;i++)
      cin>>pre[i];

     for(i=1;i<=n;i++)
      cin>>post[i];

     for(i=1;i<=n;i++)
      cin>>in[i];

      p1=1, p2=n;

      if(fun(p1, p2, 1, n)){
          cout<<"yes";
      }
      else{
          cout<<"no";
      }
}

 
int32_t main()
{
    fast_cin();
    ll tc=1;
    // cin >> tc;
    while (tc--) 
     {
        solve();
     }
    return 0;
}
