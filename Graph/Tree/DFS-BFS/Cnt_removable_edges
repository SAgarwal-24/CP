//link: https://codeforces.com/contest/982/problem/C
// sol: https://codeforces.com/contest/982/submission/138030936

//Good concept of counting subtree nodes and checking removable edge , deserves revision , for clean code see some other codes too
// 

#include <bits/stdc++.h>
using namespace std;
 
#define endl '\n' 
#define int long long 
#define ll long long 
#define pi (3.141592653589) 
#define mod 1000000007 
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define INF 2e18
#define vi vector<int>
#define vvi vector<vector<int>>
#define watch(x) cout << (#x) << " -> "  << (x) << endl
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define all(x) (x).begin(), (x).end()
#define sz(x) ((ll)(x).size())
#define inputarr(arr, n) for (ll i = 0; i < n; i++) cin >> arr[i];
#define printarr(arr, n) for (ll i = 0; i < n; i++) cout << arr[i] << ' ';



const int N = 1e5+1;

vi tree[N];
int n;
int removable_edges=0;

bool flag=true;

int dfs(int node, int par){

    int subordinates=0;   //number of nodes in subtree 

    for(auto nbr: tree[node]){

        if(nbr==par)continue;

        subordinates += dfs(nbr, node);
    }

    int rem = n-(subordinates+1); //remaining nodes -> after excluding subordinates and itself


    if ( (subordinates+1)%2==0 and  rem%2==0){
        
        // watch(subordinates);
        // watch(node);
        flag = false;

        if(par!=-1)
        removable_edges++;
    }

    return subordinates + 1;
}

void solve() {
     int i; 
     cin>>n;

     for(i=1;i<n;i++){
         int u,v;
         cin>>u>>v;

        tree[u].pb(v);
        tree[v].pb(u);
     }

     dfs(1,-1);

     if(flag==true){
         cout<<-1;
         return;
     }

    cout<<removable_edges<<endl;
}

 
int32_t main()
{
    fast_cin();
    ll tc=1;
    // cin >> tc;
    while (tc--) 
     {
        solve();
     }
    return 0;
}
