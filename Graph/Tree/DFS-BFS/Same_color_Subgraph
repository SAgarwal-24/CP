//link: https://codeforces.com/problemset/problem/763/A  
//sol: https://codeforces.com/contest/763/submission/137728975
//good problem - editorial is enough


#include <bits/stdc++.h>
using namespace std;
 
#define endl '\n' 
#define int long long 
#define ll long long 
#define pi (3.141592653589) 
#define mod 1000000007 
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define INF 2e18
#define vi vector<int>
#define vvi vector<vector<int>>
#define watch(x) cout << (#x) << " -> "  << (x) << endl
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define all(x) (x).begin(), (x).end()
#define sz(x) ((ll)(x).size())
#define inputarr(arr, n) for (ll i = 0; i < n; i++) cin >> arr[i];
#define printarr(arr, n) for (ll i = 0; i < n; i++) cout << arr[i] << ' ';
 

/*

Requirement - all subtrees of root should be of same color
            - in other words - in those subtrees there shouldn't be any edge such that its nodes(or vertices) are differently colored

So we need to make sure 
      any edge - having different colored vertices - atleast one of them should be a successful root
      - ie root fullfilling all requirements

    reasoning/proof:
      - if we find both of them - unsuccessful roots
      - it means -> some other vertex will be successful root (just assume for a moment)
      - in that case these unsuccessful different colored roots(or nodes) will lie in same subtree (as they are connected by a edge)
      - which is enough to prove that there
              - bcz of these unsuccessful different colored roots
              - there won't be any other successful candidate for required vertex
              - and our answer will be simply 'NO'

*/

const int N = 1e5+5;

int n=0;
vi col(N);
vi tree[N];

//checks subtree color is same or not
bool subtree_color(int node, int par, int c){

   
    for(auto nbr: tree[node]){

        if(nbr==par)continue;

        if(col[nbr]!=c)return false;

        if( subtree_color(nbr, node, c) == false ){
            return false;
        }
    }

    return true;
}


bool dfs(int node, int par){

    

    for(auto nbr:tree[node]){

        if(nbr==par)continue;

        if (subtree_color(nbr, node, col[nbr]) == false){
            return false;
        }
    }

    return true;
}

void solve() {
     int i; 
     cin>>n;

     for(i=0;i<n-1;i++){
         int u,v;
         cin>>u>>v;

         tree[u].pb(v);
         tree[v].pb(u);
     }

   
     for(i=1;i<=n;i++){
         cin>>col[i];
     }

     for(int node=1; node<=n; node++){

        for(auto nbr: tree[node]){

            if(col[node] != col[nbr]){

                
                if ( dfs(node,-1) ){
                    cout<<"YES\n";
                    cout<<node;
                    return;
                }

                if ( dfs(nbr,-1) ){
                    cout<<"YES\n";
                    cout<<nbr;
                    return;
                }

                cout<<"NO";
                return;

            }
        }
     }


    cout<<"YES\n";
    cout<<1;  //any vertex as at this point shows - all nodes of tree are of same color
     
}

 
int32_t main()
{
    fast_cin();
    ll tc=1;
    // cin >> tc;
    while (tc--) 
     {
        solve();
     }
    return 0;
}
