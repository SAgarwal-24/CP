//link: https://codeforces.com/problemset/problem/755/C (PolandBall and Forest)

/*
  - Count Number of Trees in Forest
  -Since max. distant relative(farthest node) will be in the component only for each ball[i](node)
  
  - then this problems reduces to standard problem of counting no of components in a graph using DSU
*/

#include <bits/stdc++.h>
using namespace std;
 
#define endl '\n' 
#define int long long 
#define ll long long 
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define INF 2e18
#define vi vector<int>
#define watch(x) cout << (#x) << " -> "  << (x) << endl
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)



class forest{

    int nodes;
    int *par;
    int *rank;

  public:
    forest(int n){
        this->nodes = n;
        par = new int[n+1];
        rank  = new int[n+1];

        for(int i=1;i<=n;i++)
            par[i] = -1,  rank[i] = 1;
        
    }

    int findset(int u){

        if(par[u]<0)
            return u;
        
        return par[u] = findset(par[u]);
    }

    void union_set(int u, int v){

        u = findset(u);
        v = findset(v);

        if(u==v)return;

        if(rank[u] > rank[v]){
            par[v] = u;
            rank[u] += rank[v];
        }
        else{
            par[u] = v;
            rank[v] += rank[u];
        }
    }

    bool same_component (int u, int v){
        return findset(u) == findset(v);
    }

    int num_of_trees(){
        
        int c=0;

        for(int i=1; i<=nodes; i++){
            c += par[i]<1 ;
        }

        return c;
    }

    void print(){

        for(int i=1; i<=nodes; i++){
            cout<<par[i]<<" - "<<i<<endl;
        }

        cout<<"----\n";
    }
};

void solve() {
     int i, n; 
     cin>>n;

     forest g(n);

    int u,v;

     for(u=1;u<=n;u++){
         cin>>v;
         g.union_set(u,v);
     }

    // g.print();

    cout<<g.num_of_trees()<<endl;
    
}

 
int32_t main()
{
    fast_cin();
    ll tc=1;
    // cin >> tc;
    while (tc--) 
     {
        solve();
     }
    return 0;
}
