//link: https://codeforces.com/contest/1559/problem/D1
//sol: https://codeforces.com/contest/1559/submission/138012954

#include <bits/stdc++.h>
using namespace std;
 
#define endl '\n' 
#define int long long 
#define ll long long 
#define pi (3.141592653589) 
#define mod 1000000007 
#define mp make_pair
#define pb push_back
#define ff first
#define ss second
#define INF 2e18
#define vi vector<int>
#define vvi vector<vector<int>>
#define watch(x) cout << (#x) << " -> "  << (x) << endl
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define all(x) (x).begin(), (x).end()
#define sz(x) ((ll)(x).size())
#define inputarr(arr, n) for (ll i = 0; i < n; i++) cin >> arr[i];
#define printarr(arr, n) for (ll i = 0; i < n; i++) cout << arr[i] << ' ';

/*

suppose

 components in forest-1
   c1 c2 ...... .....cn

 components in forest-2
   c1 c2 ...... cm

 now in each step
   - we can only add a edge b/w 2 components (otherwise resulting forest is not tree ie there should be no cycles)
   - which reduces no of components in both of the forest by 1
   - since whatever pair of forest we merge it doesn't matter 

   step-1
   forest-1 : c1 c2 ...... ....c(n-1)
   forest-2 : c1 c2 ...... ....c(m-1)

   step-2
   forest-1 : c1 c2 ...... ....c(n-2)
   forest-2 : c1 c2 ...... ....c(m-2)

   ...

   step-k (last step-> only one component is left)
   forest-1 : c1
   forest-2 : c1



*/


class forest{

    int v;
    int *par;
    int *rank;

  public:
    forest(int v){
        this->v = v;
        par = new int[v+1];
        rank  = new int[v+1];

        for(int i=1;i<=v;i++)
            par[i] = -1,  rank[i] = 1;
        
    }

    int findset(int u){

        if(par[u]<0)
            return u;
    
         return par[u] = findset(par[u]);
    }

    void union_set(int u, int v){

        u = findset(u);
        v = findset(v);

        if(u==v)return;

        if(rank[u] > rank[v]){
            par[v] = u;
            rank[u] += rank[v];
        }
        else{
            par[u] = v;
            rank[v] += rank[u];
        }
    }

    bool same_component (int u, int v){
        return findset(u) == findset(v);
    }

    void print(){

        for(int i=1; i<=v; i++){
            cout<<par[i]<<" - "<<i<<endl;
        }

        cout<<"----\n";
    }
};

void solve() {
     int i, n, m1, m2, ans=0; 
     cin>>n>>m1>>m2;

     forest g1(n), g2(n);

    int u,v;

     for(i=0;i<m1;i++){
         cin>>u>>v;
         g1.union_set(u,v);
     }

     for(i=0;i<m2;i++){
         cin>>u>>v;
         g2.union_set(u,v);
     }

    //  g1.print();
    //  g2.print();

     vector<pair<int,int>>added_edges;

     for(u=1;u<=n;u++){
         for(v=1;v<=n;v++){
             if(u==v)continue;

             bool f1 = g1.same_component(u,v);
             bool f2 = g2.same_component(u,v);

             if(f1==false and f2==false){
                 g1.union_set(u,v);
                 g2.union_set(u,v);

                 added_edges.pb({u,v});
             }
         }
         cout<<endl;
     }

     cout<<added_edges.size()<<endl;

     for(auto par:added_edges){
         cout<<par.first<<" "<<par.second<<endl;
     }
}

 
int32_t main()
{
    fast_cin();
    ll tc=1;
    // cin >> tc;
    while (tc--) 
     {
        solve();
     }
    return 0;
}
