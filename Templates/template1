#include <bits/stdc++.h>
using namespace std;
 
#define endl '\n' 
#define int long long 
#define pb push_back
#define ff first
#define ss second
#define vi vector<int>
#define vvi vector<vi>
#define vd vector<double>
#define watch(x) cout << (#x) << " -> "  << (x) << endl
#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)
#define all(x) (x).begin(), (x).end()
#define sz(x) ((ll)(x).size())

/*  explaination 

*/

template <typename C,
          typename T = std::decay_t<decltype(*begin(std::declval<C>()))>,
          typename std::enable_if<!std::is_same<C, std::string>::value>::type * = nullptr>
std::ostream &operator<<(std::ostream &os, const C &container)
{
    bool first = true;
    std::stringstream ss;
    ss << '[';
    for (const auto &x : container)
    {
        if (!first)
        {
            ss << ", ";
        }
        first = false;
        ss << x;
    }
    ss << ']';
    return os << ss.str();
}
template <class T1, class T2>
std::ostream &operator<<(std::ostream &os, const std::pair<T1, T2> &p)
{
    os << '{' << p.first << ", " << p.second << '}';
    return os;
}
 
 
int expo(int a, int b){
 
    // a^b  = a ^ (101...) = a^(binary format of b) = O(log(b))
 
    int res = 1;
 
    while(b){
 
        if(b&1)
            res = res * a;
 
        a = a*a;
        b = b>>1;
    }
 
    return res;
 
}

bool cmp(double a, double b)
{

    if (abs(a - b) < 1e-6) {
        return true;
    }
   
   return false;
}


void solve(){

    int i, n;
    cin>>n;

    return;
}



// Fuck rating 
// enjoy process and improvement(by red coders like colin)
int32_t main()
{
    fast_cin();
    int tc=1;
    cin >> tc;
    while (tc--) 
     {
        solve();
     }
    return 0;
}
